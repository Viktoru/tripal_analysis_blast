<?php

require_once "includes/tripal_analysis_blast.xml_parser.inc";
require_once "includes/tripal_analysis_blast.admin.inc";
require_once "includes/tripal_analysis_blast.chado_node.inc";


/*******************************************************************************
 * Tripal Blast Result lets users show/hide blast results associated
 * with a tripal feature
 ******************************************************************************/
function tripal_analysis_blast_init() {
  // Add javascript and style sheet
  drupal_add_css(drupal_get_path('module',  'tripal_analysis_blast') .'/theme/css/tripal_analysis_blast.css', 'theme');
  drupal_add_js(drupal_get_path('module',   'tripal_analysis_blast') .'/theme/js/tripal_analysis_blast.js');
}

/*******************************************************************************
 * tripal_analysis_blast_menu()
 * HOOK: Implementation of hook_menu()
 * Entry points and paths of the module
 */
function tripal_analysis_blast_menu() {
	
	// Show top 10/25/all blast results for ajax calls
  $items['tripal_top_blast'] = array(
      'path' => 'top_blast',  
      'title' => t('Blast Hits'),  
      'page callback' => 'tripal_get_feature_blast_results_ajax',  
      'page arguments' => array(1, 2, 3), 
      'access arguments' => array('access content'),  
      'type' => MENU_CALLBACK
  );

   $items['admin/tripal/extension/tripal_blast_analysis'] = array(
      'title' => 'Tripal Analysis Blast Settings',  
      'description' => 'Settings for the displays of blast analysis results.',  
      'page callback' => 'drupal_get_form',  
      'page arguments' => array('tripal_analysis_blast_settings_form'),  
      'access arguments' => array('administer site configuration'),  
      'type' => MENU_NORMAL_ITEM,
  );
  
  return $items;
}
/**
 *
 *
 * @ingroup tripal_analysis_blast
 */
function tripal_analysis_blast_block($op = 'list',   $delta = 0, $edit=array()) {
   switch ($op) {
      case 'list':
         $blocks['blast_base']['info'] = t('Analysis: Blast Details');
         $blocks['blast_base']['cache'] = BLOCK_NO_CACHE;


         $blocks['featureblast']['info'] = t('Tripal Feature Blast Results');
         $blocks['featureblast']['cache'] = BLOCK_NO_CACHE;

         
         return $blocks;


      case 'view':
         if (user_access('access chado_analysis_blast content') and arg(0) == 'node' and is_numeric(arg(1))) {
            $nid = arg(1);
            $node = node_load($nid);
 
            $block = array();
            switch ($delta) {
               case 'blast_base':
                  $block['subject'] = t('Blast Details');
                  $block['content'] = theme('tripal_analysis_blast_base',  $node);
                  break;
               case 'featureblast':
                  $block['subject'] = t('Homology');
                  $block['content'] = theme('tripal_feature_blast_results',  $node);
                  break;  
               default :
            }

            return $block;
         }
   }
}

/**
 *  We need to let drupal know about our theme functions and their arguments.
 *  We create theme functions to allow users of the module to customize the
 *  look and feel of the output generated in this module
 */
function tripal_analysis_blast_theme() {
  $path = drupal_get_path('module', 'tripal_analysis_blast') . '/theme';
  $theme = array(
    'tripal_feature_blast_results' => array(
      'template' => 'tripal_feature_blast.results',  
      'variables' =>  array('node' => NULL),  
      'path' => $path . '/tripal_feature',  
    ),  
    'tripal_analysis_blast_base' => array(
      'template' => 'tripal_analysis_blast.base',  
      'variables' =>  array('node' => NULL),  
      'path' => $path . '/tripal_analysis_blast',  
    ),
    // Themed Forms
    'chado_analysis_blast_node_form' => array(
      'variables' => array('form'),
    ),
  );
  return $theme;
}
/*******************************************************************************
 *  
 */
function tripal_get_feature_blast_results_ajax($feature_id,  $db_id, $max) {
   $sql = "SELECT nid FROM {chado_feature} WHERE feature_id = :feature_id";
   $results = db_query($sql, array(':feature_id' => $feature_id));
   $nid = $results->fetchObject($results);
   $node = node_load($nid->nid);

   // add the additional variables that the theme needs to generate the output
   $node->db_id = $db_id;
   $node->max = $max;
   // call the theme to rebuild the blast results
   drupal_json(array('update' => theme('tripal_feature_blast_results',  $node)));
}
/*******************************************************************************
 *  
 */
function tripal_analysis_blast_preprocess_tripal_feature_blast_results(&$variables) {
   $feature = $variables['node']->feature;
   $db_id = $variables['node']->db_id; // this value only gets set on an ajax call
  
   $max = 10;
   if (isset($variables['node']->max)) {
      $max = $variables['node']->max;
   }

   $blast_results = tripal_get_feature_blast_results($feature->feature_id,  $db_id, $max);
   if (!is_object($feature->tripal_analysis_blast)) {
     $feature->tripal_analysis_blast = new stdClass;
   }
   $feature->tripal_analysis_blast->blast_results_list = $blast_results;      
}

/*******************************************************************************
 * tripal_get_feature_blast_results()
 * Get blast result from featureprop table for the feature
 */
function tripal_get_feature_blast_results($feature_id, $db_id, $max) {

  // Get the blast results stored as XML from the analysisfeatureprop table
   // the type for the property is named 'analysis_blast_output_iteration_hits'
   // and is found in the 'tripal' controlled vocabulary.  This CV term was
   // added by this module.
   $select = array(
      'analysisfeature_id' => array(
         'feature_id' => $feature_id,
      ),   
      'type_id' => array(
         'name' => 'analysis_blast_output_iteration_hits',  
         'cv_id' => array(
            'name' => 'tripal'
         ),  
      ),           
   );
   $blast_results = tripal_core_chado_select('analysisfeatureprop', array('*'), $select);
   if (!$blast_results) {
      return;
   }

  // get the HTML content for viewing each of the XML file
  $blast_obj_array = array();
  $blast_obj_counter = 0;
  foreach ($blast_results as $index => $analysisfeatureprop) {
      // get the blast XML for this feature
      $blast_xml = $analysisfeatureprop->value;

      // get the analysis record
      $analysisfeature_arr = tripal_core_chado_select('analysisfeature', array('analysis_id'), 
         array('analysisfeature_id' => $analysisfeatureprop->analysisfeature_id));
      $analysis_arr = tripal_core_chado_select('analysis', array('*'), 
         array('analysis_id' => $analysisfeature_arr[0]->analysis_id));
      $analysis = $analysis_arr[0];
      $analysis_id = $analysis->analysis_id;

      // the old style was to store all parameters in a single CV term in the analysisprop 
      // table. However now each property has it's own CV term in that table. But,
      // we still need to support the old method for backwards compatibility.
      // so,  first get the old style variable and see if it has values. In
      // particular we need the database setting
      $blast_settings  = tripal_analysis_get_property($analysis_id, 'analysis_blast_settings');  
      if ($blast_settings) {
       $blastsettings = explode("|",   $blast_settings->value);
         // if we don't have the proper number of fields in the value column then
         // skip this entry
         if (count($blastsettings) != 3) {
           continue;
         }
       $adb_id = $blastsettings[0];
      }
      // if we're not using the old style then try the new method to get the 
      // database id
      else {
         $blastdb = tripal_analysis_get_property($analysis_id, 'analysis_blast_blastdb');
         $adb_id = $blastdb->value;
      }
      // if the callee specified a database to show then we want to check that
      // with the database id of the analysis we're looking at.  If they
      // don't match then skip this blast.  If a database id was not specified
      // then continue
      if ($db_id and $adb_id != $db_id) {
         continue;
      } 

      // get the database
      if ($adb_id) {
        $db_arr = tripal_core_chado_select('db', array('*'), array('db_id' => $adb_id)); 
        $db = $db_arr[0];
      }

      // parse the XML and add it to the array of blast results to be returned
    $blast_obj = tripal_analysis_blast_get_result_object($blast_xml, $db, $max, $feature_id, $analysis);
      $blast_obj->analysis = $analysis;
    $blast_obj_array [$blast_obj_counter] = $blast_obj;
    $blast_obj_counter ++;
  }

   return $blast_obj_array;
}


/**
*
*/
function chado_analysis_blast_submit_jobs($node) {
   global $user;

   // add a job if the user wants to parse the XML        
  if ($node->blastjob) {
      $job_args = array(
        $node->analysis_id,
        $node->blastdb,
        $node->blastfile,
        $node->no_parsed,
        $node->blastfile_ext,
        $node->query_re,
        $node->query_type,  
        $node->query_uniquename,
        $node->is_concat,
        $node->search_keywords,
      );

    if (is_readable($node->blastfile)) {
      tripal_add_job("Parse blast: $node->blastfile",  'tripal_analysis_blast',
                          'tripal_analysis_blast_parseXMLFile',   $job_args, $user->uid);
    } 
    else {
      drupal_set_message(filter_xss(t("Blast output file,  $node->blastfile, is not readable 
           by the server.  Check existence of file and file permissions. 
           Job not scheduled.")));
    }
  }
   // add a job if the user wants to create a best hits report.
  if ($node->blastbesthit) {
      $j_args[0] = $node->analysis_id;  
    tripal_add_job("Parse best hit: $node->blastfile",  'tripal_analysis_blast',
                     'tripal_analysis_blast_parse_best_hit',   $j_args, $user->uid);      
   }
    
}


/*******************************************************************************
 * Set the permission types that the chado module uses.  Essentially we
 * want permissionis that protect creation,  editing and deleting of chado
 * data objects
 */
function tripal_analysis_blast_permissions() {
  return array(
    'access chado_analysis_blast content' => array(
      'title' => t('View Chado Analysis Blast'),
      'description' => t('Allow users to view chado analysis blast pages.'),
    ),  
    'create chado_analysis_blast content' => array(
      'title' => t('Create Chado Analysis Blast'),
      'description' => t('Allow users to create new chado analysis blast pages.'),
    ),  
    'delete chado_analysis_blast content'=> array(
      'title' => t('Delete Chado Analysis Blast'),
      'description' => t('Allow users to delete chado analysis blast pages.'),
    ),
    'edit chado_analysis_blast content'=> array(
      'title' => t('Edit Chado Analysis Blast'),
      'description' => t('Allow users to edit chado analysis blast pages.'),
    ),
  );
}

/**
 *
 *
 * @ingroup tripal_feature
 */
function tripal_analysis_blast_job_describe_args($callback, $args) {

   $new_args = array();
   if ($callback == 'tripal_analysis_blast_parseXMLFile') {

      // add in the analysis 
      if ($args[0]) {
         $analysis = tripal_core_chado_select('analysis', array('name'), array('analysis_id' => $args[0]));
      }
      $new_args['Analysis'] = $analysis[0]->name;

      // add in the database 
      if ($args[1]) {
         $db = tripal_core_chado_select('db', array('name'), array('db_id' => $args[1]));
      }
      $new_args['Database'] = $db[0]->name;

      $new_args['File or Directory Name'] = $args[2];
      if ($args[8] == 1) {
        $new_args['Is XML file concatenated'] = 'Yes';
      } 
      else {
        $new_args['Is XML file concatenated'] = 'No';
      }
      $new_args['File Extension (if directory)'] = $args[4];
      $new_args['Number matches parsed per query'] = $args[3];
      $new_args['Query name regular expression'] = $args[5];
      $new_args['Query type'] = $args[6];
      if ($args[7] == 1) {
        $new_args['Feature identifier'] = 'feature unique name';
      } 
      else {
        $new_args['Feature identifier'] = 'feature name';
      }
      if ($args[9]) {
         $new_args['Tripal Views Integration'] = 'Yes';
      } 
      else {
         $new_args['Tripal Views Integration'] = 'No';      
      }
   }
   return $new_args;
}
